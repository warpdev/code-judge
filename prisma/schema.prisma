// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String?      @default("user")
  submissions   Submission[]
  Hint          Hint[]
  Problem       Problem[]
  Lecture       Lecture[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Problem {
  id           Int          @id @default(autoincrement())
  title        String
  description  Json
  locale       Int
  memoryLimit  Int
  timeLimit    Int
  inputFormat  Json
  outputFormat Json
  sampleInput  String
  sampleOutput String
  testSetSize  Int          @default(0)
  createdAt    DateTime     @default(now())
  createdBy    String
  isPublic     Boolean      @default(false)
  answerId     Int?
  submission   Submission[]
  Hint         Hint[]
  User         User         @relation(fields: [createdBy], references: [id], onDelete: NoAction)
  tags         Tag[]
  lectures     Lecture[]
}

model Submission {
  id          Int          @id @default(autoincrement())
  problemId   Int
  userId      String
  languageId  Int
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem     Problem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  language    Language     @relation(fields: [languageId], references: [id])
  judgeTokens JudgeToken[]
}

model Hint {
  id        String   @id @default(cuid())
  problemId Int
  userId    String
  content   String
  createdAt DateTime @default(now())
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Language {
  id             Int          @id
  name           String
  monacoLanguage String
  submission     Submission[]
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String
  problems Problem[]
}

model JudgeToken {
  id           String     @id
  submissionId Int
  status       Int        @default(1)
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Lecture {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  content     Json
  videoUrl    String?
  locale      Int
  createdAt   DateTime  @default(now())
  createdBy   String
  isPublic    Boolean   @default(true)
  User        User      @relation(fields: [createdBy], references: [id], onDelete: NoAction)
  problems    Problem[]
}
